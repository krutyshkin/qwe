import telebot
from telebot import types
from tinydb import TinyDB, Query
import time
from datetime import datetime, timedelta
from config import TOKEN, CHANNEL_ID, CHANNEL_LINK, ADMIN_CHANNEL_ID, ADMIN_ID, COEF_ODD, COEF_EVEN, COEF_LESS, COEF_MORE, COEF_GUESS, COEF_RAIN, COEF_SNOW, SNOW_CHANCE_IF_CHOSEN, RAIN_CHANCE_IF_CHOSEN
import random
from queue import Queue
import string

def create_bot():
    global BOT_USERNAME 
    bot = telebot.TeleBot(TOKEN)
    db = TinyDB('db.json')
    User = Query()
    bot_info = bot.get_me()
    BOT_USERNAME = bot_info.username
    bet_queue = Queue()
    bets_db = TinyDB('bets.json')
    payments_db = TinyDB('payments.json')

    def process_queue():
        while not bet_queue.empty():
            call = bet_queue.get()
            confirm_game(call)
            time.sleep(5)

    @bot.message_handler(commands=['start'])
    def start_handler(message):
        user_id = message.from_user.id
        username = message.from_user.username or "NoUsername"
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name or ""
        param = message.text.split()[1] if len(message.text.split()) > 1 else None

        if not db.get(User.user_id == user_id):
            ref_code = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(12))
            db.insert({
                'user_id': user_id,
                'balance': 0,
                'bets_count': 0,
                'total_earned': 0,
                'reg_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'first_name': first_name,
                'last_name': last_name,
                'ref_code': ref_code,
                'referrals': 0,
                'referred_by': None
            })

        if param and param != "bet":
            user_data = db.get(User.user_id == user_id)
            referrer = db.get(User.ref_code == param)
            if referrer and user_id not in db.search(User.referred_by == referrer['user_id']) and user_data['reg_date'] == datetime.now().strftime("%Y-%m-%d %H:%M:%S"):
                db.update({'referrals': referrer['referrals'] + 1}, User.user_id == referrer['user_id'])
                db.update({'referred_by': referrer['user_id']}, User.user_id == user_id)
                bot.send_message(referrer['user_id'], f"<b>–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name}</b>", parse_mode='HTML', disable_web_page_preview=True)

        if param == "bet":
            user_data = db.get(User.user_id == user_id)
            bot.send_message(message.chat.id,
                            f"<b>–ü—Ä–∏—à–ª–∏—Ç–µ —Å—É–º–º—É –∑–≤—ë–∑–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å—Ç–∞–≤–∫–∏.</b>\n\n"
                            f"–ë–∞–ª–∞–Ω—Å: <code>{user_data['balance']} –∑–≤—ë–∑–¥</code>",
                            parse_mode='HTML',
                            disable_web_page_preview=True)
            bot.register_next_step_handler(message, process_bet_amount)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn_play = types.KeyboardButton("üé≤ –ò–≥—Ä–∞—Ç—å")
            btn_profile = types.KeyboardButton("‚ö°Ô∏è –ü—Ä–æ—Ñ–∏–ª—å")
            btn_ref = types.KeyboardButton("üîó –†–µ—Ñ. —Å–∏—Å—Ç–µ–º–∞")
            btn_add = types.KeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
            btn_withdraw = types.KeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏")
            btn_top = types.KeyboardButton("üèÜ –¢–æ–ø")
            markup.add(btn_play)
            markup.add(btn_profile, btn_ref)
            markup.add(btn_add, btn_withdraw)
            markup.add(btn_top)
            
            bot.send_message(message.chat.id,
                            f"<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}</b>\n\n"
                            f"–ö–∞–Ω–∞–ª —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏ - <a href='{CHANNEL_LINK}'>—Ç—ã–∫</a>",
                            parse_mode='HTML',
                            reply_markup=markup,
                            disable_web_page_preview=True)

    @bot.message_handler(commands=['give'])
    def give_stars(message):
        if message.from_user.id != ADMIN_ID:
            bot.send_message(message.chat.id, "<b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!</b>", parse_mode='HTML', disable_web_page_preview=True)
            return
        try:
            amount = int(message.text.split()[1])
            if amount <= 0:
                bot.send_message(message.chat.id, "<b>–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!</b>", parse_mode='HTML', disable_web_page_preview=True)
                return
            user_data = db.get(User.user_id == message.from_user.id)
            new_balance = user_data['balance'] + amount
            db.update({'balance': new_balance}, User.user_id == message.from_user.id)
            bot.send_message(message.chat.id, f"<b>–í—ã –≤—ã–¥–∞–ª–∏ —Å–µ–±–µ {amount} –∑–≤—ë–∑–¥. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}</b>", parse_mode='HTML', disable_web_page_preview=True)
        except (IndexError, ValueError):
            bot.send_message(message.chat.id, "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /give {—á–∏—Å–ª–æ}</b>", parse_mode='HTML', disable_web_page_preview=True)

    @bot.message_handler(commands=['admin'])
    def admin_menu(message):
        if message.from_user.id != ADMIN_ID:
            bot.send_message(message.chat.id, "<b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!</b>", parse_mode='HTML', disable_web_page_preview=True)
            return
        markup = types.InlineKeyboardMarkup()
        btn_give = types.InlineKeyboardButton("–í—ã–¥–∞—Ç—å –∑–≤—ë–∑–¥—ã", callback_data="admin_give")
        btn_take = types.InlineKeyboardButton("–û—Ç–æ–±—Ä–∞—Ç—å –≤—Å–µ –∑–≤—ë–∑–¥—ã", callback_data="admin_take")
        btn_stats = types.InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        markup.add(btn_give)
        markup.add(btn_take)
        markup.add(btn_stats)
        bot.send_message(message.chat.id, "<b>–ê–¥–º–∏–Ω –º–µ–Ω—é</b>", parse_mode='HTML', reply_markup=markup, disable_web_page_preview=True)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
    def admin_action(call):
        action = call.data.split("_")[1]
        if action == "give":
            bot.edit_message_text("<b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>", call.message.chat.id, call.message.message_id, parse_mode='HTML', disable_web_page_preview=True)
            bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_admin_give_id)
        elif action == "take":
            bot.edit_message_text("<b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>", call.message.chat.id, call.message.message_id, parse_mode='HTML', disable_web_page_preview=True)
            bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_admin_take_id)
        elif action == "stats":
            day_ago = datetime.now() - timedelta(days=1)
            week_ago = datetime.now() - timedelta(days=7)
            month_ago = datetime.now() - timedelta(days=30)
            
            bets_day = len(bets_db.search(Query().timestamp > day_ago.strftime("%Y-%m-%d %H:%M:%S")))
            bets_week = len(bets_db.search(Query().timestamp > week_ago.strftime("%Y-%m-%d %H:%M:%S")))
            bets_month = len(bets_db.search(Query().timestamp > month_ago.strftime("%Y-%m-%d %H:%M:%S")))
            bets_all = len(bets_db.all())
            
            payments_day = sum([p['amount'] for p in payments_db.search(Query().timestamp > day_ago.strftime("%Y-%m-%d %H:%M:%S"))])
            payments_week = sum([p['amount'] for p in payments_db.search(Query().timestamp > week_ago.strftime("%Y-%m-%d %H:%M:%S"))])
            payments_month = sum([p['amount'] for p in payments_db.search(Query().timestamp > month_ago.strftime("%Y-%m-%d %H:%M:%S"))])
            payments_all = sum([p['amount'] for p in payments_db.all()])
            
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_back")
            markup.add(btn_back)
            
            bot.edit_message_text(
                f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                f"<b>–°—Ç–∞–≤–∫–∏:</b>\n"
                f"–ó–∞ —Å—É—Ç–∫–∏: <code>{bets_day}</code>\n"
                f"–ó–∞ –Ω–µ–¥–µ–ª—é: <code>{bets_week}</code>\n"
                f"–ó–∞ –º–µ—Å—è—Ü: <code>{bets_month}</code>\n"
                f"–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: <code>{bets_all}</code>\n\n"
                f"<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:</b>\n"
                f"–ó–∞ —Å—É—Ç–∫–∏: <code>{payments_day}</code>\n"
                f"–ó–∞ –Ω–µ–¥–µ–ª—é: <code>{payments_week}</code>\n"
                f"–ó–∞ –º–µ—Å—è—Ü: <code>{payments_month}</code>\n"
                f"–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: <code>{payments_all}</code>",
                call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup, disable_web_page_preview=True
            )

    def process_admin_give_id(message):
        try:
            user_id = int(message.text)
            bot.send_message(message.chat.id, "<b>–°–∫–æ–ª—å–∫–æ –≤—ã–¥–∞—Ç—å –∑–≤—ë–∑–¥?</b>", parse_mode='HTML', disable_web_page_preview=True)
            bot.register_next_step_handler(message, lambda m: process_admin_give_amount(m, user_id))
        except ValueError:
            bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!</b>", parse_mode='HTML', disable_web_page_preview=True)

    def process_admin_give_amount(message, user_id):
        try:
            amount = int(message.text)
            if amount <= 0:
                bot.send_message(message.chat.id, "<b>–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!</b>", parse_mode='HTML', disable_web_page_preview=True)
                return
            user_data = db.get(User.user_id == user_id)
            if user_data:
                new_balance = user_data['balance'] + amount
                db.update({'balance': new_balance}, User.user_id == user_id)
                bot.send_message(message.chat.id, f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω–æ {amount} –∑–≤—ë–∑–¥</b>", parse_mode='HTML', disable_web_page_preview=True)
                bot.send_message(user_id, f"<b>–í–∞–º –≤—ã–¥–∞–Ω–æ {amount} –∑–≤—ë–∑–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!</b>", parse_mode='HTML', disable_web_page_preview=True)
            else:
                bot.send_message(message.chat.id, "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>", parse_mode='HTML', disable_web_page_preview=True)
        except ValueError:
            bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!</b>", parse_mode='HTML', disable_web_page_preview=True)

    def process_admin_take_id(message):
        try:
            user_id = int(message.text)
            user_data = db.get(User.user_id == user_id)
            if user_data:
                db.update({'balance': 0}, User.user_id == user_id)
                bot.send_message(message.chat.id, "<b>–ó–≤—ë–∑–¥—ã –æ—Ç–æ–±—Ä–∞–Ω—ã</b>", parse_mode='HTML', disable_web_page_preview=True)
                bot.send_message(user_id, "<b>–í—Å–µ –≤–∞—à–∏ –∑–≤—ë–∑–¥—ã –±—ã–ª–∏ –æ—Ç–æ–±—Ä–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!</b>", parse_mode='HTML', disable_web_page_preview=True)
            else:
                bot.send_message(message.chat.id, "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>", parse_mode='HTML', disable_web_page_preview=True)
        except ValueError:
            bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!</b>", parse_mode='HTML', disable_web_page_preview=True)

    @bot.callback_query_handler(func=lambda call: call.data == "admin_back")
    def admin_back(call):
        markup = types.InlineKeyboardMarkup()
        btn_give = types.InlineKeyboardButton("–í—ã–¥–∞—Ç—å –∑–≤—ë–∑–¥—ã", callback_data="admin_give")
        btn_take = types.InlineKeyboardButton("–û—Ç–æ–±—Ä–∞—Ç—å –≤—Å–µ –∑–≤—ë–∑–¥—ã", callback_data="admin_take")
        btn_stats = types.InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        markup.add(btn_give)
        markup.add(btn_take)
        markup.add(btn_stats)
        bot.edit_message_text("<b>–ê–¥–º–∏–Ω –º–µ–Ω—é</b>", call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup, disable_web_page_preview=True)

    @bot.message_handler(func=lambda message: message.text == "üí∏ –í—ã–≤–µ—Å—Ç–∏")
    def withdraw_stars_handler(message):
        user_id = message.from_user.id
        user_data = db.get(User.user_id == user_id)
        balance = user_data['balance']
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        buttons = [
            types.InlineKeyboardButton("15 –∑–≤—ë–∑–¥", callback_data="withdraw_15"),
            types.InlineKeyboardButton("25 –∑–≤—ë–∑–¥", callback_data="withdraw_25"),
            types.InlineKeyboardButton("50 –∑–≤—ë–∑–¥", callback_data="withdraw_50"),
            types.InlineKeyboardButton("100 –∑–≤—ë–∑–¥", callback_data="withdraw_100"),
            types.InlineKeyboardButton("150 –∑–≤—ë–∑–¥", callback_data="withdraw_150"),
            types.InlineKeyboardButton("350 –∑–≤—ë–∑–¥", callback_data="withdraw_350"),
            types.InlineKeyboardButton("500000000 –∑–≤—ë–∑–¥", callback_data="withdraw_500000000")
        ]
        markup.add(*buttons)
        
        bot.send_message(message.chat.id,
                        f"<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{balance} –∑–≤—ë–∑–¥</code>\n\n"
                        f"<b>–í—ã–±–µ—Ä–∏ —Å—É–º–º—É –∑–≤—ë–∑–¥ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏.</b>",
                        parse_mode='HTML',
                        reply_markup=markup,
                        disable_web_page_preview=True)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("withdraw_"))
    def withdraw_amount_choice(call):
        user_id = call.from_user.id
        user_data = db.get(User.user_id == user_id)
        count = int(call.data.split("_")[1])
        
        if user_data['balance'] < count:
            bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
            return
        
        markup = types.InlineKeyboardMarkup()
        btn_yes = types.InlineKeyboardButton("–î–∞", callback_data=f"confirm_withdraw_{count}")
        btn_no = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_withdraw")
        markup.add(btn_yes, btn_no)
        
        bot.edit_message_text(
            f"<b>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ {count} –∑–≤—ë–∑–¥?</b>",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup,
            disable_web_page_preview=True
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_withdraw_"))
    def confirm_withdraw(call):
        user_id = call.from_user.id
        count = int(call.data.split("_")[2])
        user_data = db.get(User.user_id == user_id)
        username = call.from_user.username or "NoUsername"
        
        new_balance = user_data['balance'] - count
        db.update({'balance': new_balance}, User.user_id == user_id)
        
        bot.edit_message_text(
            "<b>–í—ã –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ –∑–≤—ë–∑–¥.</b>\n\n"
            "<b>–í —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∑–≤—ë–∑–¥—ã.</b>",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
        markup = types.InlineKeyboardMarkup()
        btn_issued = types.InlineKeyboardButton("–í—ã–¥–∞–Ω–æ", callback_data=f"issued_{user_id}_{count}")
        markup.add(btn_issued)
        
        bot.send_message(
            ADMIN_CHANNEL_ID,
            f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
            f"<blockquote><b>ID: {user_id}</b></blockquote>\n"
            f"<blockquote><b>–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}</b></blockquote>\n"
            f"<code>{count} –∑–≤—ë–∑–¥</code>",
            parse_mode='HTML',
            reply_markup=markup,
            disable_web_page_preview=True
        )

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_withdraw")
    def cancel_withdraw(call):
        bot.edit_message_text(
            "<b>–í—ã–≤–æ–¥ –∑–≤—ë–∑–¥ –æ—Ç–º–µ–Ω—ë–Ω</b>",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            disable_web_page_preview=True
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("issued_"))
    def issue_withdraw(call):
        user_id = int(call.data.split("_")[1])
        count = int(call.data.split("_")[2])
        username = call.from_user.username or "NoUsername"
        
        bot.edit_message_text(
            f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
            f"<blockquote><b>ID: {user_id}</b></blockquote>\n"
            f"<blockquote><b>–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}</b></blockquote>\n"
            f"<code>{count} –∑–≤—ë–∑–¥</code>\n\n"
            f"<pre><b>–í—ã–¥–∞–Ω–æ</b></pre>",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
        bot.send_message(
            user_id,
            f"<b>‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –∏—â–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–∞—Ä–∫–æ–º –∑–∞ {count} –∑–≤—ë–∑–¥ –æ—Ç –Ω–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>",
            parse_mode='HTML',
            disable_web_page_preview=True
        )

    def process_bet_amount(message):
        try:
            user_id = message.from_user.id
            amount = int(message.text)
            user_data = db.get(User.user_id == user_id)
            if amount <= 0:
                bot.send_message(message.chat.id, "<b>–°—É–º–º–∞ –∑–≤—ë–∑–¥ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è</b>", parse_mode='HTML', disable_web_page_preview=True)
                return
            if amount > user_data['balance']:
                bot.send_message(message.chat.id, "<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!</b>", parse_mode='HTML', disable_web_page_preview=True)
                return
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            btn_cube = types.InlineKeyboardButton("üé≤ –ö—É–±", callback_data=f"cube_{amount}")333
            btn_cube_number = types.InlineKeyboardButton("üé≤ –ö—É–± —á–∏—Å–ª–æ", callback_data=f"cube_number_{amount}")
            btn_winter = types.InlineKeyboardButton("‚ùÑÔ∏è –ó–∏–º–Ω–∏–µ", callback_data=f"winter_{amount}")
            markup.add(btn_cube, btn_cube_number)
            markup.add(btn_winter)
            
            bot.send_message(message.chat.id,
                            f"<blockquote><b>üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É</b></blockquote>\n\n"
                            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å—ã–≥—Ä–∞–µ—Ç –≤ –Ω–∞—à–µ–º <a href='{CHANNEL_LINK}'>–∫–∞–Ω–∞–ª–µ</a>",
                            parse_mode='HTML',
                            reply_markup=markup,
                            disable_web_page_preview=True)
        except ValueError:
            bot.send_message(message.chat.id, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>", parse_mode='HTML', disable_web_page_preview=True)
        except Exception as e:
            bot.send_message(message.chat.id, f"<b>–û—à–∏–±–∫–∞: {str(e)}</b>", parse_mode='HTML', disable_web_page_preview=True)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("cube_") and not call.data.startswith("cube_number_"))
    def cube_choice(call):
        amount = int(call.data.split("_")[1])
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_odd = types.InlineKeyboardButton(f"–ù–µ—á—ë—Ç | {COEF_ODD}—Ö", callback_data=f"game_odd_{amount}")
        btn_even = types.InlineKeyboardButton(f"–ß—ë—Ç | {COEF_EVEN}—Ö", callback_data=f"game_even_{amount}")
        btn_less = types.InlineKeyboardButton(f"–ú–µ–Ω—å—à–µ | {COEF_LESS}—Ö", callback_data=f"game_less_{amount}")
        btn_more = types.InlineKeyboardButton(f"–ë–æ–ª—å—à–µ | {COEF_MORE}—Ö", callback_data=f"game_more_{amount}")
        markup.add(btn_odd, btn_even)
        markup.add(btn_less, btn_more)
        
        bot.edit_message_text(
            f"<blockquote><b>üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É</b></blockquote>\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å—ã–≥—Ä–∞–µ—Ç –≤ –Ω–∞—à–µ–º <a href='{CHANNEL_LINK}'>–∫–∞–Ω–∞–ª–µ</a>",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup,
            disable_web_page_preview=True
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("cube_number_"))
    def cube_number_choice(call):
        amount = int(call.data.split("_")[2])
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_1 = types.InlineKeyboardButton(f"1 | {COEF_GUESS}—Ö", callback_data=f"game_guess_{amount}_1")
        btn_2 = types.InlineKeyboardButton(f"2 | {COEF_GUESS}—Ö", callback_data=f"game_guess_{amount}_2")
        btn_3 = types.InlineKeyboardButton(f"3 | {COEF_GUESS}—Ö", callback_data=f"game_guess_{amount}_3")
        btn_4 = types.InlineKeyboardButton(f"4 | {COEF_GUESS}—Ö", callback_data=f"game_guess_{amount}_4")
        btn_5 = types.InlineKeyboardButton(f"5 | {COEF_GUESS}—Ö", callback_data=f"game_guess_{amount}_5")
        btn_6 = types.InlineKeyboardButton(f"6 | {COEF_GUESS}—Ö", callback_data=f"game_guess_{amount}_6")
        markup.add(btn_1, btn_2)
        markup.add(btn_3, btn_4)
        markup.add(btn_5, btn_6)
        
        bot.edit_message_text(
            f"<blockquote><b>üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É</b></blockquote>\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å—ã–≥—Ä–∞–µ—Ç –≤ –Ω–∞—à–µ–º <a href='{CHANNEL_LINK}'>–∫–∞–Ω–∞–ª–µ</a>",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup,
            disable_web_page_preview=True
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("winter_"))
    def winter_choice(call):
        amount = int(call.data.split("_")[1])
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_rain = types.InlineKeyboardButton(f"–î–æ–∂–¥—å | {COEF_RAIN}—Ö", callback_data=f"game_rain_{amount}")
        btn_snow = types.InlineKeyboardButton(f"–°–Ω–µ–≥ | {COEF_SNOW}—Ö", callback_data=f"game_snow_{amount}")
        markup.add(btn_rain, btn_snow)
        
        bot.edit_message_text(
            f"<blockquote><b>üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É</b></blockquote>\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å—ã–≥—Ä–∞–µ—Ç –≤ –Ω–∞—à–µ–º <a href='{CHANNEL_LINK}'>–∫–∞–Ω–∞–ª–µ</a>",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup,
            disable_web_page_preview=True
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("game_"))
    def game_choice(call):
        parts = call.data.split("_")
        game_type = parts[1]
        amount = int(parts[2])
        outcome = parts[3] if len(parts) > 3 else None
        
        markup = types.InlineKeyboardMarkup()
        btn_yes = types.InlineKeyboardButton("–î–∞", callback_data=f"confirm_{game_type}_{amount}_{outcome}" if outcome else f"confirm_{game_type}_{amount}")
        btn_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel")
        markup.add(btn_yes, btn_no)
        
        bot.edit_message_text(
            "<b>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É?</b>",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup,
            disable_web_page_preview=True
        )

    def get_game_text(game_type, outcome=None):
        if game_type == "more": return "–ë–æ–ª—å—à–µ"
        elif game_type == "less": return "–ú–µ–Ω—å—à–µ"
        elif game_type == "even": return "–ß—ë—Ç"
        elif game_type == "odd": return "–ù–µ—á—ë—Ç"
        elif game_type == "guess" and outcome: return f"–ß–∏—Å–ª–æ {outcome}"
        elif game_type == "rain": return "–î–æ–∂–¥—å"
        elif game_type == "snow": return "–°–Ω–µ–≥"
        return ""

    @bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
    def confirm_game(call):
        user_id = call.from_user.id
        parts = call.data.split("_")
        game_type = parts[1]
        amount = int(parts[2])
        outcome = parts[3] if len(parts) > 3 else None
        
        username = call.from_user.username or "NoUsername"
        user_data = db.get(User.user_id == user_id)
        
        new_balance = user_data['balance'] - amount
        new_bets_count = user_data['bets_count'] + 1
        db.update({'balance': new_balance, 'bets_count': new_bets_count}, User.user_id == user_id)
        bets_db.insert({'user_id': user_id, 'amount': amount, 'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")})
        
        game_text = get_game_text(game_type, outcome)
        coefficient = COEF_GUESS if game_type == "guess" else COEF_RAIN if game_type == "rain" else COEF_SNOW if game_type == "snow" else 2
        potential_win = amount * coefficient
        
        bot.edit_message_text(
            f"<b>–ö–∞–Ω–∞–ª —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏ - <a href='{CHANNEL_LINK}'>—Ç—ã–∫</a></b>",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
        channel_msg = bot.send_message(
            CHANNEL_ID,
            f"<b>‚ù§Ô∏è‚Äçüî• {user_data['first_name']} {user_data['last_name']} —Å—Ç–∞–≤–∏—Ç {amount} –∑–≤—ë–∑–¥ –Ω–∞ {game_text}</b>\n\n"
            f"<blockquote><b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {coefficient}—Ö</b></blockquote>\n"
            f"<blockquote><b>–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –≤—ã–∏–≥—Ä—ã—à {potential_win} –∑–≤—ë–∑–¥</b></blockquote>",
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
        time.sleep(1)
        if game_type in ["rain", "snow"]:
            chance = SNOW_CHANCE_IF_CHOSEN if game_type == "snow" else RAIN_CHANCE_IF_CHOSEN
            result = "‚ùÑÔ∏è" if (game_type == "snow" and random.randint(1, 100) <= chance) or (game_type == "rain" and random.randint(1, 100) > (100 - chance)) else "‚õà"
            dice_msg = bot.send_message(CHANNEL_ID, result, disable_web_page_preview=True)
            dice_value = 1 if result == "‚ùÑÔ∏è" else 0
        else:
            dice = bot.send_dice(CHANNEL_ID)
            dice_value = dice.dice.value
        
        time.sleep(3)
        
        markup = types.InlineKeyboardMarkup()
        bet_button = types.InlineKeyboardButton("üöÄ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{BOT_USERNAME}?start=bet")
        markup.add(bet_button)
        
        win = check_win(game_type, outcome, dice_value)
        win_multiplier = COEF_GUESS if game_type == "guess" else COEF_RAIN if game_type == "rain" else COEF_SNOW if game_type == "snow" else 2
        
        if win:
            win_amount = amount * win_multiplier
            new_balance = user_data['balance'] - amount + win_amount
            new_total_earned = user_data['total_earned'] + win_amount
            db.update({
                'balance': new_balance,
                'total_earned': new_total_earned
            }, User.user_id == user_id)
            
            if user_data['referred_by']:
                referrer = db.get(User.user_id == user_data['referred_by'])
                ref_bonus = int(win_amount * 0.05)
                ref_balance = referrer['balance'] + ref_bonus
                db.update({'balance': ref_balance}, User.user_id == referrer['user_id'])
                bot.send_message(referrer['user_id'], f"<b>–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª {win_amount} –∑–≤—ë–∑–¥! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: {ref_bonus} –∑–≤—ë–∑–¥</b>", parse_mode='HTML', disable_web_page_preview=True)
            
            bot.send_message(
                CHANNEL_ID,
                f"<b>üî• –ü–æ–±–µ–¥–∞! –í—ã–ø–∞–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ {dice_value if game_type not in ['rain', 'snow'] else result}</b>\n\n"
                f"<blockquote><b>–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∑–∞—á–∏—Å–ª–µ–Ω –≤—ã–∏–≥—Ä—ã—à {win_amount} –∑–≤—ë–∑–¥.\n"
                f"–û–ø—Ä–æ–±—É–π—Ç–µ —Å–≤–æ—é —É–¥–∞—á—É —Å–ø–æ–ª–Ω–∞ –∏ –ø–æ–∑–Ω–∞–π—Ç–µ –ø—É—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ –∂–∏–∑–Ω–∏!</b></blockquote>",
                parse_mode='HTML',
                reply_markup=markup,
                disable_web_page_preview=True
            )
            bot.send_message(
                user_id,
                f"<b>üî• –ü–æ–±–µ–¥–∞! –í—ã–ø–∞–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ {dice_value if game_type not in ['rain', 'snow'] else result}</b>\n\n"
                f"<blockquote><b>–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∑–∞—á–∏—Å–ª–µ–Ω –≤—ã–∏–≥—Ä—ã—à {win_amount} –∑–≤—ë–∑–¥.\n"
                f"–û–ø—Ä–æ–±—É–π—Ç–µ —Å–≤–æ—é —É–¥–∞—á—É —Å–ø–æ–ª–Ω–∞ –∏ –ø–æ–∑–Ω–∞–π—Ç–µ –ø—É—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ –∂–∏–∑–Ω–∏!</b></blockquote>",
                parse_mode='HTML',
                reply_markup=markup,
                disable_web_page_preview=True
            )
        else:
            bot.send_message(
                CHANNEL_ID,
                f"<b>üö´ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!</b>\n\n"
                f"–í—ã–ø–∞–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ {dice_value if game_type not in ['rain', 'snow'] else result}",
                parse_mode='HTML',
                reply_markup=markup,
                disable_web_page_preview=True
            )
            bot.send_message(
                user_id,
                f"<b>üö´ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!</b>\n\n"
                f"–í—ã–ø–∞–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ {dice_value if game_type not in ['rain', 'snow'] else result}",
                parse_mode='HTML',
                reply_markup=markup,
                disable_web_page_preview=True
            )
        
        if not bet_queue.empty():
            process_queue()

    def check_win(game_type, outcome, dice_value):
        if game_type == "more": return dice_value in [4, 5, 6]
        elif game_type == "less": return dice_value in [1, 2, 3]
        elif game_type == "even": return dice_value % 2 == 0
        elif game_type == "odd": return dice_value % 2 != 0
        elif game_type == "guess": return dice_value == int(outcome)
        elif game_type == "rain": return dice_value == 0
        elif game_type == "snow": return dice_value == 1
        return False

    @bot.callback_query_handler(func=lambda call: call.data == "cancel")
    def cancel_game(call):
        bot.edit_message_text(
            "<b>–°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            disable_web_page_preview=True
        )

    @bot.message_handler(func=lambda message: message.text == "‚ö°Ô∏è –ü—Ä–æ—Ñ–∏–ª—å")
    def profile_handler(message):
        user_id = message.from_user.id
        user_data = db.get(User.user_id == user_id)
        username = message.from_user.username or "NoUsername"
        
        text = "üé≤ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        text += f"üëâüèº ID: <code>{user_id}</code>\n"
        text += f"üí∞ –ë–∞–ª–∞–Ω—Å: <code>{user_data['balance']} –∑–≤—ë–∑–¥</code>\n"
        text += f"‚öô –ù–∏–∫–Ω–µ–π–º: <code>{user_data['first_name']} {user_data['last_name']}</code>\n"
        text += f"üéÆ –Æ–∑–µ—Ä–Ω–µ–π–º: <code>@{username}</code>\n"
        text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
        text += "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"üíé –°—Ç–∞–≤–æ–∫: <code>{user_data['bets_count']}</code>\n"
        text += f"üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{user_data['total_earned']} –∑–≤—ë–∑–¥</code>\n"
        text += f"üìÜ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>{user_data['reg_date']}</code>\n"
        text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
        
        bot.send_message(message.chat.id, text, parse_mode='HTML', disable_web_page_preview=True)

    @bot.message_handler(func=lambda message: message.text == "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
    def add_stars_handler(message):
        bot.send_message(message.chat.id,
                        "<b>–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –∑–≤–µ–∑–¥ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å</b>",
                        parse_mode='HTML',
                        disable_web_page_preview=True)
        bot.register_next_step_handler(message, process_payment_amount)

    def process_payment_amount(message):
        try:
            user_id = message.from_user.id
            amount = int(message.text)
            if amount <= 0:
                bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ</b>", parse_mode='HTML', disable_web_page_preview=True)
                return
            bot.send_invoice(
                message.chat.id,
                "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤—ë–∑–¥",
                f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} –∑–≤—ë–∑–¥. –ú–∞–∫—Å–∏–º—É–º 100.000 –∑–≤–µ–∑–¥",
                f"payment_{user_id}_{amount}",
                "",
                "XTR",
                [types.LabeledPrice(label="Stars", amount=amount)]
            )
        except ValueError:
            bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b>", parse_mode='HTML', disable_web_page_preview=True)

    @bot.pre_checkout_query_handler(func=lambda query: True)
    def process_pre_checkout_query(pre_checkout_query):
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

    @bot.message_handler(content_types=['successful_payment'])
    def process_successful_payment(message):
        user_id = message.from_user.id
        amount = message.successful_payment.total_amount
        user_data = db.get(User.user_id == user_id)
        new_balance = user_data['balance'] + amount
        db.update({'balance': new_balance}, User.user_id == user_id)
        payments_db.insert({'user_id': user_id, 'amount': amount, 'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")})
        bot.send_message(message.chat.id, f"<b>‚úÖ –°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω.\n\nüí∞ –ù–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount} –∑–≤—ë–∑–¥.</b>", parse_mode='HTML', disable_web_page_preview=True)

    @bot.message_handler(func=lambda message: message.text == "üîó –†–µ—Ñ. —Å–∏—Å—Ç–µ–º–∞")
    def ref_system(message):
        user_id = message.from_user.id
        user_data = db.get(User.user_id == user_id)
        ref_link = f"https://t.me/{BOT_USERNAME}?start={user_data['ref_code']}"
        bot.send_message(message.chat.id,
                        f"<b>‚ù§Ô∏è‚Äçüî• –ù–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>\n\n"
                        f"‚îè üéâ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{user_data['referrals']}</code>\n"
                        f"‚î£ üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{user_data['balance']} –∑–≤—ë–∑–¥</code>\n"
                        f"‚î£ üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: <code>{user_data['total_earned']} –∑–≤—ë–∑–¥</code>\n"
                        f"‚îó üöÄ –°—Å—ã–ª–∫–∞: <code>{ref_link}</code>\n\n"
                        f"üí≥ –ú—ã –ø–ª–∞—Ç–∏–º <b>10%</b> —Å –≤—ã–∏–≥—Ä—ã—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
                        parse_mode='HTML',
                        disable_web_page_preview=True)

    @bot.message_handler(func=lambda message: message.text == "üé≤ –ò–≥—Ä–∞—Ç—å")
    def play_game(message):
        user_id = message.from_user.id
        user_data = db.get(User.user_id == user_id)
        bot.send_message(message.chat.id,
                        f"<b>–ü—Ä–∏—à–ª–∏—Ç–µ —Å—É–º–º—É –∑–≤—ë–∑–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å—Ç–∞–≤–∫–∏.</b>\n\n"
                        f"–ë–∞–ª–∞–Ω—Å: <code>{user_data['balance']} –∑–≤—ë–∑–¥</code>",
                        parse_mode='HTML',
                        disable_web_page_preview=True)
        bot.register_next_step_handler(message, process_bet_amount)

    @bot.message_handler(func=lambda message: message.text == "üèÜ –¢–æ–ø")
    def top_users(message):
        top_users = sorted([u for u in db.all() if u['user_id'] != ADMIN_ID], key=lambda x: x['total_earned'], reverse=True)[:5]
        text = "<b>üí∏ –¢–æ–ø 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–±–æ—Ä–æ—Ç—É:</b>\n\n"
        for i, user in enumerate(top_users, 1):
            text += f"{i}. {user['first_name']} {user['last_name']} ‚Äî <code>{user['total_earned']} ‚≠êÔ∏è</code>\n"
        bot.send_message(message.chat.id, text, parse_mode='HTML', disable_web_page_preview=True)

    return bot

def run_bot():
    global BOT_USERNAME  
    while True:
        try:
            bot = create_bot()
            bot.polling(none_stop=True, timeout=60)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")

if __name__ == "__main__":
    run_bot()
